#!/usr/bin/env python3
#
# openbox-xdg-autostart runs things based on the XDG autostart specification
#
# XDG autostart specification can be found here:
# http://standards.freedesktop.org/autostart-spec/
#
# LICENSE:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

import sys
import os
import glob
import subprocess

try:
    from xdg import BaseDirectory
    from xdg.DesktopEntry import DesktopEntry
    from xdg.Exceptions import ParsingError
except ImportError:
    print("\nERROR: openbox-xdg-autostart requires PyXDG to be installed.\n", file=sys.stderr)
    sys.exit(1)

ME = "openbox-xdg-autostart"
VERSION = "1.2"  # Incremented version number for this updated script

def show_help():
    """Display usage information."""
    print(f"Usage: {ME} [OPTION]... [ENVIRONMENT]...\n")
    print("This tool will run xdg autostart .desktop files.\n")
    print("OPTIONS")
    print("  --list        Show a list of the files which would be run.")
    print("                Files which would be run are marked with an asterisk [*].")
    print("                For files which would not be run, information is given")
    print("                for why they are excluded.")
    print("  --help        Show this help and exit.")
    print("  --version     Show version and copyright information.\n")
    print("ENVIRONMENT specifies a list of environments for which to run autostart")
    print("applications. If none are specified, only applications which do not")
    print("limit themselves to certain environments will be run.\n")
    print("Common ENVIRONMENT values include:")
    print("  GNOME, KDE, ROX, XFCE, Old (for legacy systems), etc.\n")

def show_version():
    """Display version information."""
    print(f"{ME} {VERSION}")

class AutostartFile:
    """Represents a .desktop file and the logic needed to run or list it."""

    def __init__(self, path):
        self.path = path
        self.filename = os.path.basename(path)
        self.dirname = os.path.dirname(path)
        self.de = DesktopEntry(path)

    def __eq__(self, other):
        if not isinstance(other, AutostartFile):
            return False
        return self.filename == other.filename

    def __str__(self):
        return f"{self.path} : {self.de.getName()}"

    @staticmethod
    def _isexecfile(path):
        return os.access(path, os.X_OK)

    def _find_file(self, filename, search_paths, match_func):
        """
        Given a filename (TryExec) and a string of search_paths (PATH),
        return the first matching executable file found, or None if not found.
        """
        if not filename:
            return None
        # Check for absolute path
        if filename.startswith("/"):
            return filename if match_func(filename) else None
        # Otherwise, look in each directory in PATH
        for directory in search_paths.split(os.pathsep):
            if directory:
                candidate = os.path.join(directory, filename)
                if match_func(candidate):
                    return candidate
        return None

    @staticmethod
    def _alert(message, info=False):
        """
        Print info or exclusion reasons in a standardized way.
        """
        marker = "  " if info else "* "
        print(f"\t{marker}{message}")

    def _show_in_environment(self, envs, verbose=False):
        """
        Determine if this .desktop file is shown in any of the given environments.
        """
        # If OnlyShowIn is set, default becomes False unless we match one
        # If NotShowIn is set, we must not match one to remain visible
        default = not self.de.getOnlyShowIn()  # if no OnlyShowIn, default = True
        noshow = False
        force = False

        # Check OnlyShowIn
        for env in self.de.getOnlyShowIn():
            if env in envs:
                force = True

        # Check NotShowIn
        for env in self.de.getNotShowIn():
            if env in envs:
                noshow = True

        if verbose:
            # If it's forced out by OnlyShowIn
            if (not default) and (not force):
                only_show = ", ".join(self.de.getOnlyShowIn())
                self._alert(f"Excluded by: OnlyShowIn ({only_show})")

            # If it's forced out by NotShowIn
            if default and noshow and (not force):
                not_show = ", ".join(self.de.getNotShowIn())
                self._alert(f"Excluded by: NotShowIn ({not_show})")

        return (default and not noshow) or force

    def _should_run(self, envs, verbose=False):
        """
        Evaluate whether this .desktop file should be run in the given environments.
        """
        # Missing Exec?
        if not self.de.getExec():
            if verbose:
                self._alert("Excluded by: Missing Exec field")
            return False

        # Hidden file?
        if self.de.getHidden():
            if verbose:
                self._alert("Excluded by: Hidden")
            return False

        # Check TryExec presence/validity
        if self.de.getTryExec():
            if not self._find_file(self.de.getTryExec(), os.getenv("PATH", ""), self._isexecfile):
                if verbose:
                    self._alert(f"Excluded by: TryExec ({self.de.getTryExec()})")
                return False

        # Check environment constraints
        if not self._show_in_environment(envs, verbose):
            return False

        return True

    def display(self, envs):
        """
        Print whether this file would run ([*]) or not ([ ]) and why.
        """
        if self._should_run(envs):
            print(f"[*] {self.de.getName()}")
        else:
            print(f"[ ] {self.de.getName()}")

        self._alert(f"File: {self.path}", info=True)

        if self.de.getExec():
            self._alert(f"Executes: {self.de.getExec()}", info=True)

        # Show reasons it might be excluded (verbose mode)
        self._should_run(envs, verbose=True)
        print()

    def run(self, envs):
        """
        Actually run this autostart file if it is valid for the given environments.
        """
        original_cwd = os.getcwd()
        try:
            if self.de.getPath():
                os.chdir(self.de.getPath())

            if self._should_run(envs):
                # Use subprocess.Popen instead of os.spawnv
                cmd = f"exec {self.de.getExec()}"
                subprocess.Popen(["/bin/sh", "-c", cmd])
        finally:
            os.chdir(original_cwd)

def main(argv=None):
    """Main entry point for the script."""
    if argv is None:
        argv = sys.argv

    # Handle options
    if "--help" in argv[1:]:
        show_help()
        return 0

    if "--version" in argv[1:]:
        show_version()
        return 0

    # Build list of autostart files
    autodirs = BaseDirectory.load_config_paths("autostart")
    autostart_files = []

    for directory in autodirs:
        for path in glob.glob(os.path.join(directory, '*.desktop')):
            try:
                af = AutostartFile(path)
            except ParsingError:
                print(f"Invalid .desktop file: {path}")
            else:
                if af not in autostart_files:
                    autostart_files.append(af)

    # Check if we only want to list
    list_mode = False
    if "--list" in argv[1:]:
        list_mode = True
        argv.remove("--list")

    # Remaining args are the environments
    envs = argv[1:]  # e.g. ["GNOME", "KDE", ...]

    # Run or list
    for af in autostart_files:
        if list_mode:
            af.display(envs)
        else:
            af.run(envs)

    return 0

if __name__ == "__main__":
    sys.exit(main())
